版本控制
	代码仓库【shell,php,配置文件】
svn,git

svnadmin create /var/svn/pro
cd /shell
svn import file:///var/svn/pro
cd /var/svn/pro/conf
svnserve.conf  
anon =none
auth =

passwd

authz
[/]
tom = rw
起服务
svnserve -d -r /var/svn/pro
svn co svn://192.168.2.100 abc
svnserve -d
svn co svn://192.168.2.100/var/svn/pro abc
cd /svn
修改提交
svn ci -m "注释"
新建完以后 svn add “文件名”
更新svn update

查看不一样（本地和服务器）svn diff a.sh		svn diff //查看所有文件的差异
查看服务器文件内容svn cat svn://192.168.2.100/a.sh

svn update 
svn revert "文件名"	//还原文件
(//将文件从版本7还原到版本2)svn merge -r10:2		tuned.service
svn -r2 svn://192.168.2.100 /qq

网页版
github:注册，start project,项目名称
github.com/账户/项目
upload,download
命令行
git clone github.com/.../...
cd /项目

RPM
1.描述
2.打包【源码---】
1）安装rpm-build软件包
	yum -y install rpm-build
2）生成rpmbuild目录结构
	rpm-build -ba xx.spec
	cd /root/rpmbuild/
	SOURCES RPMS SPECS
3）准备工作，将源码软件复制到SOURCES目录
	# cp nginx-1.12.2.tar.gz(xx) /root/rpmbuild/SOURCES/
4）创建并修改SPEC配置文件
	vim xx.spec



##################################################################################

VPN概述
	Virtual Private Network(虚拟专用网络)
	=在『公用网络上』建立『专用私有网络』，进行加密通讯
	=多用于为集团公司的各地子公司建立连接
	=连接完成后，各个地区的子公司可以像局域网一样通讯
	=在企业网络中有广泛应用
	=『偶尔可以用于翻墙』
	=目前主流的VPN技术（GRE，PPTP，L2TP+IPSec,SSL）
GRE模块
	Linux内核模块
	—— ip_gre
	加载模块
	— lsmod | grep ip_gre	//显示模块列表
	— modprobe ip_gre		//加载模版
	— modinfo ip_gre		//查看模块信息
	缺点：缺少加密机制

启用GRE模块
	1）查看计算机当前加载的模块
	# lsmod                            //显示模块列表
	# lsmod  | grep ip_gre            //确定是否加载了gre模块
	2)加载模块ip_gre
	# modprobe  ip_gre 
	3）查看模块信息
	# modinfo ip_gre

Client主机创建VPN隧道(另一个一样)
	1）创建隧道
	# ip tunnel add tun0  mode gre remote 201.1.2.5 local 201.1.2.10
	//ip tunnel add创建隧道（隧道名称为tun0），ip tunnel help可以查看帮助
	//mode设置隧道使用gre模式
	//local后面跟本机的IP地址，remote后面是与其他主机建立隧道的对方IP地址
	2）启用该隧道（类似与设置网卡up）
	# ip link show
	# ip link set tun0 up         //设置UP
	# ip link show
	3）为VPN配置隧道IP地址
	# ip addr add 10.10.10.10/24 peer 10.10.10.5/24 dev tun0
	//为隧道tun0设置本地IP地址（10.10.10.10.10/24）
	//隧道对面的主机IP的隧道IP为10.10.10.5/24
	# ip a s                      //查看IP地址
	4）开启路由转发、关闭防火墙
	# echo "1" > /proc/sys/net/ipv4/ip_forward
	# firewall-cmd --set-default-zone=trusted

	5)测试连通性
	[root@client ~]#  ping 10.10.10.5
	[root@proxy ~]#   ping 10.10.10.10

PPTP概述
	PPTP（Point to Point Tunneling Protocol）
	支持密码身份验证
	只是MPPE（Microsoft Point-to-Point Enryption）
创建PPTP VPN
部署VPN服务器
	1）安装软件包（软件包参考lnmp_soft）
	# yum localinstall pptpd-1.4.0-2.el7.x86_64.rpm
	# rpm -qc pptpd
	/etc/ppp/options.pptpd
	/etc/pptpd.conf
	/etc/sysconfig/pptpd
	2)修改配置文件
	# vim /etc/pptpd.conf
	.. ..
	localip 201.1.2.5                                    //服务器本地IP
	remoteip 192.168.3.1-50                            //分配给客户端的IP池
	# vim /etc/ppp/options.pptpd
	require-mppe-128                                    //使用MPPE加密数据
	ms-dns 8.8.8.8                                    //DNS服务器
	# vim /etc/ppp/chap-secrets            //修改账户配置文件
	jacob           *               123456      *
	//用户名    服务器标记    密码    客户端
	# echo "1" > /proc/sys/net/ipv4/ip_forward    //开启路由转发	
	3）启动服务
	# systemctl start pptpd
	# systemctl enable pptpd
	# firewall-cmd --set-default-zone=trusted
	4）翻墙设置（非必需操作）
	# iptables -t nat -A POSTROUTING -s 192.168.3.0/24 \
	>  -j SNAT --to-source 201.1.2.5


L2TP概述
	Layer Two Tunneling Protocol(L2TP)
	L2TP建立主机之间的VPN隧道，压缩，验证
	IPSec提供数据加密、数据校验、访问控制的功能
创建L2TP+IPSec VPN

部署IPSec服务

	1）安装软件包
	# yum -y install libreswan
	2)新建IPSec密钥验证配置文件
	# cat /etc/ipsec.conf                //仅查看一下该主配置文件
	.. ..
	include /etc/ipsec.d/*.conf                    //加载该目录下的所有配置文件
	# vim /etc/ipsec.d/myipsec.conf            
	//新建该文件，参考lnmp_soft/vpn/myipsec.conf    
	conn IDC-PSK-NAT
	    rightsubnet=vhost:%priv                        //允许建立的VPN虚拟网络
	    also=IDC-PSK-noNAT
	conn IDC-PSK-noNAT
	    authby=secret                                    //加密认证
	        ike=3des-sha1;modp1024                        //算法
	        phase2alg=aes256-sha1;modp2048                //算法
	    pfs=no
	    auto=add
	    keyingtries=3
	    rekey=no
	    ikelifetime=8h
	    keylife=3h
	    type=transport
	    left=201.1.2.200                                //重要，服务器本机的外网IP
	    leftprotoport=17/1701
	    right=%any                                    //允许任何客户端连接
	    rightprotoport=17/%any
	3)创建IPSec预定义共享密钥
	# cat /etc/ipsec.secrets                 //仅查看，不要修改该文件
	include /etc/ipsec.d/*.secrets
	# vim /etc/ipsec.d/mypass.secrets        //新建该文件
	201.1.2.200   %any:    PSK    "randpass"             //randpass为密钥
                                                //201.1.2.200是VPN服务器的IP
	4)启动IPSec服务
	# systemctl start ipsec        
	# netstat -ntulp |grep pluto
	udp        0      0 127.0.0.1:4500          0.0.0.0:*           3148/pluto          
	udp        0      0 192.168.4.200:4500      0.0.0.0:*           3148/pluto          
	udp        0      0 201.1.2.200:4500        0.0.0.0:*           3148/pluto          
	udp        0      0 127.0.0.1:500           0.0.0.0:*           3148/pluto          
	udp        0      0 192.168.4.200:500       0.0.0.0:*           3148/pluto          
	udp        0      0 201.1.2.200:500         0.0.0.0:*           3148/pluto          
	udp6       0      0 ::1:500                 :::*                 3148/pluto

部署XL2TP服务

	1）安装软件包（软件包参考lnmp_soft）
	# yum localinstall xl2tpd-1.3.8-2.el7.x86_64.rpm
	2) 修改xl2tp配置文件（修改3个配置文件的内容）
	#  vim  /etc/xl2tpd/xl2tpd.conf                //修改主配置文件
	[global]
	.. ..    
	[lns default]
	.. ..
	ip range = 192.168.3.128-192.168.3.254                    //分配给客户端的IP池
	local ip = 201.1.2.200                                //VPN服务器的IP地址
	# vim /etc/ppp/options.xl2tpd                //认证配置
	require-mschap-v2                                         //添加一行，强制要求认证
	#crtscts                                                //注释或删除该行
	#lock                                                //注释或删除该行
	# vim /etc/ppp/chap-secrets                    //修改密码文件
	jacob   *       123456  *                //账户名称   服务器标记   密码   客户端IP
	3）启动服务
	# systemctl start xl2tpd
	# netstat  -ntulp |grep xl2tpd        
	udp     0      0 0.0.0.0:1701      0.0.0.0:*          3580/xl2tpd
	4）设置路由转发，防火墙
	# echo "1" > /proc/sys/net/ipv4/ip_forward
	# firewall-cmd --set-default-zone=trusted
	5）翻墙设置（非必需操作）
	# iptables -t nat -A POSTROUTING -s 192.168.3.0/24 \
	>  -j SNAT --to-source 201.1.2.200
步骤二：客户端设置

启动一台Windows虚拟机，将虚拟机网卡桥接到public2，配置IP地址为201.1.2.20。
新建网络连接（参考案例2），输入VPN服务器账户与密码（参考案例2）。
设置Windows注册表（不修改注册表，连接VPN默认会报789错误），具体操作如下：
单击"开始"，单击"运行"，键入"regedit"，然后单击"确定"
找到下面的注册表子项，然后单击它：
HKEY_LOCAL_MACHINE\ System\CurrentControlSet\Services\Rasman\Parameters
在"编辑"菜单上，单击"新建"->"DWORD值"
在"名称"框中，键入"ProhibitIpSec"
在"数值数据"框中，键入"1"，然后单击"确定"
退出注册表编辑器，然后重新启动计算机

NTP时间同步

部署NTP服务
	1）安装软件包
	# yum -y install chrony
	# rpm -qc chrony                        //查看配置文件列表
	/etc/chrony.conf
	/etc/chrony.keys
	.. ..
	2)修改配置文件
	# cat /etc/chrony.conf
	.. ..
	server 0.centos.pool.ntp.org iburst         //server用户客户端指向上层NTP服务器
	allow 192.168.4.0/24                        //允许那个IP或网络访问NTP
	#deny  192.168.4.1                        //拒绝那个IP或网络访问NTP
	local stratum 10                            //设置NTP服务器的层数量
	.. ..
	4)启动NTP服务
	# systemctl  restart  chronyd
	# systemctl  enable  chronyd
	5)设置防火墙
	# firewall-cmd --set-default-zone=trusted

步骤二：配置客户端
	1）安装软件包
	# yum –y install chrony
	2) 修改配置文件
	# vim /etc/chrony.conf
	server 192.168.4.5 iburst                //设置与哪台服务器同步数据
                                        //iburst参数设置重启服务后尽快同步时间
	3) 将客户端时间修改为错误的时间
	#  date  -s  "hour:minute"         //调整时间（小时：分钟）
	#  date                            //查看修改后的时间
	4) 重启chrony与服务器同步时间
	# systemctl  restart  chronyd
	5) 确认时间是否已经同步
	# date                            //多执行几次查看结果
pssh远程套件工具
5.1 问题

使用pssh套件工具并发远程其他主机，
使用密码批量、多并发远程其他主机
使用密钥批量、多并发远程其他主机
批量、多并发拷贝数据到其他主机
批量、多并发从其他主机下载数据到本机
批量、多并发杀死其他主机的进程

准备实验所需的虚拟机环境，实验环境所需要的主机及对应的IP设置列表如表-5所示，正确配置IP地址、主机名称，并且为每台主机配置YUM源。

安装pssh后会提供如下命令：
/usr/bin/pnuke
/usr/bin/prsync
/usr/bin/pscp.pssh
/usr/bin/pslurp
/usr/bin/pssh

准备工作
1）安装软件包
[root@proxy ~]# rpm -ivh  pssh-2.3.1-5.el7.noarch.rpm
2)修改/etc/hosts本地解析文件
cat /etc/hosts
… …
192.168.2.100  host1
192.168.2.200  host2
192.168.4.100  host3
… …
3)创建主机列表文件
[root@proxy ~]# cat /root/host.txt            //每行一个用户名、IP或域名
… …
root@host1
host2
host3
… …
步骤二：使用密码批量、多并发远程其他主机

1）语法格式
[root@proxy ~]# man pssh                    //通过man帮助查看工具选项的作用
pssh提供并发远程连接功能
-A                使用密码远程其他主机（默认使用密钥）
-i                将输出显示在屏幕
-H                设置需要连接的主机
-h                设置主机列表文件
-p                设置并发数量
-t                设置超时时间
-o dir            设置标准输出信息保存的目录
-e dir            设置错误输出信息保存的目录
-x                传递参数给ssh
2)使用密码远程多台主机执行命令，屏幕显示标准和错误输出信息
[root@proxy ~]# pssh -i  -A -H  'host1 host2 host3'   \
>  -x '-o StrictHostKeyChecking=no'   echo hello
3)使用密码远程多台主机执行命令，不显示标准和错误输出信息，通过读取host.txt读取主机信息
[root@proxy ~]# pssh -A -h host.txt  \
>  -x '-o StrictHostKeyChecking=no' echo hello
步骤三：使用密钥批量、多并发远程其他主机

1）生成密钥并发送密钥到其他主机
[root@proxy ~]# ssh-keygen -N  ''   -f /root/.ssh/id_rsa     //非交互生成密钥文件
[root@proxy ~]# ssh-copy-id -i /root/.ssh/id_rsa.pub host1
[root@proxy ~]# ssh-copy-id -i /root/.ssh/id_rsa.pub host2
[root@proxy ~]# ssh-copy-id -i /root/.ssh/id_rsa.pub host3
2)使用密钥远程其他主机
[root@proxy ~]# pssh  -h host.txt -x '-o StrictHostKeyChecking=no' echo hello
3)使用密钥远程其他主机，将标准输出信息写入到/tmp目录
[root@proxy ~]# pssh  -h host.txt -o /tmp/ -x '-o StrictHostKeyChecking=no' echo hello
步骤四：批量、多并发拷贝数据到其他主机

1）语法格式
[root@proxy ~]# man pscp.pssh                    //通过man帮助查看工具选项的作用
pscp.pssh提供并发拷贝文件功能
-r    递归拷贝目录
其他选项基本与pssh一致
2)将本地的etc.tar.gz拷贝到远程主机的根目录下
[root@proxy ~]# pscp.pssh -h host.txt \
> -x '-o StrictHostKeyChecking=no' etc.tar.gz / 
3)递归将本地的/etc目录拷贝到远程主机的/tmp目录下
[root@proxy ~]#  pscp.pssh -r -h host.txt  \
>  -x '-o StrictHostKeyChecking=no'  /etc   /tmp 
步骤五：批量、多并发从其他主机下载数据到本机

1）语法格式
[root@proxy ~]# man pslurp                    //通过man帮助查看工具选项的作用
pslurp提供远程下载功能
选项与pscp.pssh基本一致
2)将远程主机的/etc/目录，拷贝到当前目录下，存放在对应IP下的tmp目录
[root@proxy ~]# pslurp -r -h host.txt -x '-o StrictHostKeyChecking=no' /etc /tmp
3)将远程主机的/etc/目录，拷贝到media下，存放在对应IP下的tmp目录
[root@proxy ~]# pslurp -r -h host.txt -x '-o StrictHostKeyChecking=no'   \
>  -L  /media   /etc   /tmp
步骤六：批量、多并发杀死其他主机的进程

1）语法格式
[root@proxy ~]# man pnuke                    //通过man帮助查看工具选项的作用
pnuke提供远程杀死进程的功能
选项与pssh基本一致
2)将远程主机上的sleep进程杀死
[root@proxy ~]# pnuke  -h host.txt -x '-o StrictHostKeyChecking=no' sleep
3)将远程主机上的test相关脚本都杀死（如：test1,testtt,test2等等）
[root@proxy ~]# pnuke  -h host.txt -x '-o StrictHostKeyChecking=no' test
4)将远程主机上的test.sh脚本杀死
[root@proxy ~]# pnuke  -h host.txt -x '-o StrictHostKeyChecking=no' test.sh

















