nginx
1.安装【依赖  gcc pcre-devel openssl-devel】
	tar -xf nginx-1.10.3.tar.gz
	./configure --user=用户 --group=组 --prefix=路径 --with-http_ssl_module
	make && make install(拷贝) 4个目录 (/usr/local/nginx/conf,html,logs,sbin)
2.升级
	tar -zxvf 新版本nginx包
	./configure --user=用户 --group=组 --prefix=路径 --with-http_ssl_module
	make
	备份、老的。拷贝新的
	mv /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginxold
	# cp objs/nginx  /usr/local/nginx/sbin/         //拷贝新版本
	make upgrade
3.用户认证
	http{
		server{
			listen 80;
			server_name www.a.com;
	auth_basic
	auth_basic_user_file "/usr/local/nginx/pass";
			root html;
			}
		}
	#htpasswd -c /usr/local/nginx/pass tom	
	#htpasswd /usr/local/nginx/pass jerry	追加用户不需要加-c选项
	#nginx -s reload
4.虚拟主机
	http{
		server{
			listen 80;
			server_name www.a.com;
			root html;
			}
		}
	http{
		server{
			listen 80;
			server_name www.b.com;
			root www;
			}
		}
	# nginx -s reload
	谁是客户端，修改谁的/etc/hosts	本地解析
5.ssl主机（https加密网站）
	openssl genrsa > my.key
	openssl req -new -x509 -key -my.key > my.crt
	http{
	server{
		listen 443 ssl;
		server_name www.c.com;
		authentication_key my.key;
		authentication my.crt;
		root html;
		}
		}
#############################################################################################

什么是LNMP
	主流的企业网站平台之一
	— -L：Linux操作系统
	— -N：Nginx网站服务软件
	— -M：Mysql、Mariadb数据库（php-mysql）(mariadb mariadb-server mariadb-devel)
	— -P：网站开发语言（PHP、Perl、Python）(php-fpm php)
	给PHP安装扩展库文件，使得PHP可以连接MariaDB数据库（php-mysql）
	扩展文件有（mysql,oracle,sqlserver,postgresql等等）

	安装软件：（mariadb mariadb-server mariadb-devel）（php-mysql php-fpm php）
	启动服务：mariadb  php-fpm
	修改nginx配置（动静分离）
	书写页面、测试。
Nginx+FastCGI简介
	FastCGI技术目前支持语言有PHP、C/C++、Java、Perl、Python、Ruby等
FastCGI缺点
	内存消耗大
	— 因为是多进程，所以比CGI多线程消耗更多的服务器内存，
	  PHP-CGI解释器每进程消耗7至25兆内存，将这个数字乘以50或100就是很大的内存数
	— Nginx+PHP(FastCGI)服务器在3万并发连接下
		开10个Nginx进程消耗150M内存（10*15M）
		开64个php-cgi进程消耗1280M内存（20M*64）
配置FastCGI
(查看php-fpm配置文件)php配置文件 vim /etc/php-fpm.d/www.conf
	[www]
	listen = 127.0.0.1:9000            //PHP端口号
	pm.max_children = 32                //最大进程数量
	pm.start_servers = 15                //最小进程数量
	pm.min_spare_servers = 5            //最少需要几个空闲着的进程
	pm.max_spare_servers = 32            //最多允许几个进程处于空闲状态
编辑nginx.conf
	# vim /usr/local/nginx/conf/nginx.conf
	location / {
            root   html;
            index  index.php  index.html   index.htm;
	#设置默认首页为index.php，当用户在浏览器地址栏中只写域名或IP，不说访问什么页面时，
	服务器会把默认首页index.php返回给用户
        }
	 location  ~  \.php$  {
            root           html;
            fastcgi_pass   127.0.0.1:9000;    #将请求转发给本机9000端口，PHP解释器
            fastcgi_index  index.php;
       (不用这个注释掉)     #fastcgi_param   SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            include        fastcgi.conf;
        }
	# /usr/local/nginx/sbin/nginx -s reload
	#请先确保nginx是启动状态才可以执行命令成功，否则报错,报错信息如下：
	#[error] open() "/usr/local/nginx/logs/nginx.pid" failed (2: No such file or directory)
错误日志
	tailf /usr/local/nginx/logs/error.log
	tailf /var/log/php-fpm/www-error.log
	1.空白    2.下载    3.an Error （都代表报错）





############################################################################################

部署LNMP环境
	安装部署Nginx、MariaDB、PHP环境
	需要安装的软件列表如下：
	nginx
	mariadb、mariadb-server、mariadb-devel
	php、php-fpm、php-mysql
安装软件

	1）使用yum安装基础依赖包
	# yum -y install gcc openssl-devel pcre-devel zlib-devel
	2）源码安装Nginx（如果前面课程中已经安装Nginx，则忽略这一步）
	# useradd -s /sbin/nologin  nginx
	# tar -xvf nginx-1.12.2.tar.gz
	# cd nginx-1.12.2
	[nginx-1.12.2]# ./configure   \
	> --user=nginx   --group=nginx \
	> --with-http_ssl_module
	# make && make install
	.. ..
	3）安装MariaDB
	Mariadb在新版RHEL7光盘中包含有该软件，配置yum源后可以直接使用yum安装：
	# yum -y install   mariadb   mariadb-server   mariadb-devel
	4）php和php-fpm(该软件包在lnmp_soft中提供)
	# yum -y  install  php   php-mysql
	# yum -y  install php-fpm-5.4.16-42.el7.x86_64.rpm
启动服务

	1）启动Nginx服务（如果已经启动nginx，则可以忽略这一步）
	这里需要注意的是，如果服务器上已经启动了其他监听80端口的服务软件（如httpd），则需要先关闭该服务，
	否则会出现冲突。
	# systemctl stop httpd                //如果该服务存在则关闭该服务
	# /usr/local/nginx/sbin/nginx             //启动Nginx服务
	# netstat -utnlp | grep :80
	tcp    0    0 0.0.0.0:80        0.0.0.0:*        LISTEN        32428/nginx         
	2）启动MySQL服务
	# systemctl start  mariadb           //启动服务器
	# systemctl status mariadb           //查看服务状态
	# systemctl enable mariadb           //设置开机启动
	3）启动PHP-FPM服务
	# systemctl start php-fpm           //启动服务
	# systemctl status php-fpm          //查看服务状态
	# systemctl enable php-fpm          //设置开机启动
	4）设置防火墙与SELinux
	# firewall-cmd --set-default-zone=trusted
	# setenforc 0

构建LNMP平台
 php-fpm配置文件

	1）查看php-fpm配置文件（实验中不需要修改该文件）
	# vim /etc/php-fpm.d/www.conf
	[www]
	listen = 127.0.0.1:9000            //PHP端口号
	pm.max_children = 32                //最大进程数量
	pm.start_servers = 15                //最小进程数量
	pm.min_spare_servers = 5            //最少需要几个空闲着的进程
	pm.max_spare_servers = 32            //最多允许几个进程处于空闲状态
修改Nginx配置文件并启动服务

	# vim /usr/local/nginx/conf/nginx.conf
	location / {
            root   html;
            index  index.php  index.html   index.htm;
	#设置默认首页为index.php，当用户在浏览器地址栏中只写域名或IP，不说访问什么页面时，服务器会把默认首页index.php返回给用户
	        }
	 location  ~  \.php$  {
            root           html;
            fastcgi_pass   127.0.0.1:9000;    #将请求转发给本机9000端口，PHP解释器
            fastcgi_index  index.php;
            #fastcgi_param   SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            include        fastcgi.conf;
        }
	# /usr/local/nginx/sbin/nginx -s reload
	#请先确保nginx是启动状态才可以执行命令成功，否则报错,报错信息如下：
	#[error] open() "/usr/local/nginx/logs/nginx.pid" failed (2: No such file or directory)
创建PHP页面，测试LNMP架构能否解析PHP页面

1）创建PHP测试页面1，可以参考lnmp_soft/php_scripts/test.php：
	# vim /usr/local/nginx/html/test1.php
	<?php
	$i="This is a test Page";
	echo $i;
	?>
2）创建PHP测试页面,连接并查询MariaDB数据库。
	可以参考lnmp_soft/php_scripts/mysql.php:
	# vim /usr/local/nginx/html/test2.php
	<?php
	$mysqli = new mysqli('localhost','root','密码','mysql');
	//注意：root为mysql账户名称，密码需要修改为实际mysql密码，无密码则留空即可
	if (mysqli_connect_errno()){
	    die('Unable to connect!'). mysqli_connect_error();
	}
	$sql = "select * from user";
	$result = $mysqli->query($sql);
	while($row = $result->fetch_array()){
	    printf("Host:%s",$row[0]);
	    printf("</br>");
	    printf("Name:%s",$row[1]);
	    printf("</br>");
	}
	?>
3）客户端使用浏览器访问服务器PHP首页文档，检验是否成功：
	# firefox http://192.168.4.5/test1.php
	# firefox http://192.168.4.5/test2.php

4）LNMP常见问题
	Nginx的默认访问日志文件为/usr/local/nginx/logs/access.log
	Nginx的默认错误日志文件为/usr/local/nginx/logs/error.log
	PHP默认错误日志文件为/var/log/php-fpm/www-error.log
	如果动态网站访问失败，可用参考错误日志，查找错误信息。

地址重写
	关于Nginx服务器的地址重写，主要用到的配置参数是rewrite：
	rewrite regex replacement flag
	rewrite 旧地址 新地址 [选项]

访问a.html重定向到b.html（跳转地址栏）
	1）修改Nginx服务配置：
	# vim /usr/local/nginx/conf/nginx.conf
	.. ..
	server {
	        listen       80;
		server_name  localhost;
	location / {
	    root   html;
	index  index.html index.htm;
	rewrite /a.html  /b.html redirect;            
	}
	}
	# echo "BB" > /usr/local/nginx/html/b.html
	2）重新加载配置文件
	# /usr/local/nginx/sbin/nginx  -s  reload
	#请先确保nginx是启动状态才可以执行命令成功，否则报错,报错信息如下：
	#[error] open() "/usr/local/nginx/logs/nginx.pid" failed (2: No such file or directory)
修改配置文件(访问192.168.4.5的请求重定向至www.tmooc.cn)
	1) 修改Nginx服务配置
	[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
	.. ..
	server {
	        listen       80;
	        server_name  localhost;
	rewrite ^/ http://www.tmooc.cn/;
	location / {
	    root   html;
	index  index.html index.htm;
	# rewrite /a.html  /b.html  redirect;
	}
	}
	2）重新加载配置文件
	# /usr/local/nginx/sbin/nginx  -s  reload
	#请先确保nginx是启动状态才可以执行命令成功，否则报错,报错信息如下：
	#[error] open() "/usr/local/nginx/logs/nginx.pid" failed (2: No such file or directory)
	3）客户端测试（真实机测试，真实机才可以连接tmooc）
	[root@room9pc01 ~]# firefox  http://192.168.4.5
修改配置文件(访问192.168.4.5/下面子页面，重定向至www.tmooc.cn/下相同的页面)
	1) 修改Nginx服务配置
	[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
	.. ..
	server {
	        listen       80;
	        server_name  localhost;
	rewrite ^/(.*)$ http://www.tmooc.cn/$1;
	location / {
	    root   html;
	index  index.html index.htm;
	# rewrite /a.html  /b.html  redirect;
	}
	}
	2）重新加载配置文件
	[root@proxy ~]# /usr/local/nginx/sbin/nginx  -s  reload
	#请先确保nginx是启动状态才可以执行命令成功，否则报错,报错信息如下：
	#[error] open() "/usr/local/nginx/logs/nginx.pid" failed (2: No such file or directory)
	3）客户端测试（真实机测试，真实机才可以连接tmooc）
	[root@room9pc01 ~]# firefox  http://192.168.4.5
	[root@room9pc01 ~]# firefox  http://192.168.4.5/test
修改配置文件(实现curl和火狐访问相同链接返回的页面不同)
	1) 创建网页目录以及对应的页面文件：
	[root@proxy ~]# echo "I am Normal page" > /usr/local/nginx/html/test.html
	[root@proxy ~]# mkdir  -p  /usr/local/nginx/html/firefox/
	[root@proxy ~]# echo "firefox page" > /usr/local/nginx/html/firefox/test.html
	2) 修改Nginx服务配置
	[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
		.. ..
		server {
	        listen       80;
	        server_name  localhost;
	location / {
	    root   html;
	index  index.html index.htm;
	}
	#这里，~符号代表正则匹配，*符号代表不区分大小写
	if ($http_user_agent ~* firefox) {            //识别客户端firefox浏览器
	rewrite ^(.*)$ /firefox/$1;
	}
	}
	3）重新加载配置文件
	[root@proxy ~]# /usr/local/nginx/sbin/nginx  -s  reload
	#请先确保nginx是启动状态才可以执行命令成功，否则报错,报错信息如下：
	#[error] open() "/usr/local/nginx/logs/nginx.pid" failed (2: No such file or directory)
	4）客户端测试
	[root@client ~]# firefox  http://192.168.4.5/test.html
	[root@client ~]# curl     http://192.168.4.5/test.html

	5）地址重写格式【总结】
	rewrite 旧地址 新地址 [选项];
	last 不再读其他rewrite
	break 不再读其他语句，结束请求
	redirect 临时重定向
	permament 永久重定向

	$http_user_agent   识别客户的信息





















