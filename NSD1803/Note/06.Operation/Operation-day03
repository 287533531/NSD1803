LNMP
liunx
nginx [源码安装] --with-模块(模块有)
php php-fpm
mariadb mariadb-server mraidb-devel

nginx 80
systenctl start php-fpm 9000
systemctl start mariadb 3306

nginx 动静分离
	location / {root html;}
	location ~ \.php$ {
		root html;
		fastcgi_pass 127.0.0.1:9000;
	}
	#vim /usr/local/nginx/html/test.php
	<?php
	$i=33;
	echo $i;
	?>
	#vim /usr/local/nginx/www/test.html
rewrite /a.html /b.html;
rewrite /a.html /a/b/c/d/e/a.html;

rewrite ^/ http://www.sina.com;
rewrite ^/(.*) http://www.sina.com/$1;

if ($http_user_agent ~*. firefox){
	rewrite /(.*) /firefox/$1;
	}

################################################################################################

Nginx调度器 http调度、tcp/udp调度

nginx代理可以实现负载均衡、web高可用
Nginx反向代理架构

nginx[调度器]算法：轮询（默认的）：逐一循环调度
		    Weight：指定轮询几率，权重和访问比率成正比
		    ip_hash(相同客户端访问相同服务器)根据客户端IP分配固定的后端服务器
服务器状态类型
	down：表示当前server暂时布参与负载
	max_fails:允许请求失败的次数（默认为1）
	fail_timeout:max_fails次失败后，赞提供服务的时间
	backup:备份服务器

配置Nginx服务器，添加服务器池，实现反向代理功能

1）修改/usr/local/nginx/conf/nginx.conf配置文件
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
.. ..
http {
.. ..
#使用upstream定义后端服务器集群，集群名称任意(如webserver)
#使用server定义集群中的具体服务器和端口
upstream webserver {
                server 192.168.2.100:80;
                server 192.168.2.200:80;
        }
.. ..
server {
        listen        80;
        server_name  localhost;
            location / {
#通过proxy_pass将用户的请求转发给webserver集群
            proxy_pass http://webserver;
        }
}

配置upstream服务器集群的调度算法

1）设置相同客户端访问相同Web服务器
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
.. ..
http {
.. ..
upstream webserver {
#通过ip_hash设置调度规则为：相同客户端访问相同服务器
                 ip_hash;
                server 192.168.2.100 weight=1 max_fails=2 fail_timeout=10;
                server 192.168.2.200 weight=2 max_fails=2 fail_timeout=10;
        }
.. ..
server {
        listen        80;
        server_name  www.tarena.com;
            location / {
            proxy_pass http://webserver;
        }
}


Nginx的TCP/UDP调度器

Nginx编译安装时需要使用--with-stream，开启ngx_stream_core_module模块
编译安装必须要使用--with-stream参数开启4层代理模块
配置Nginx服务器，添加服务器池，实现TCP/UDP反向代理功能

1）修改/usr/local/nginx/conf/nginx.conf配置文件
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
stream {
            upstream backend {
               server 192.168.2.100:22;            //后端SSH服务器的IP和端口
               server 192.168.2.200:22;
}
            server {
                listen 12345;                    //Nginx监听的端口
                proxy_connect_timeout 1s;
                proxy_timeout 3s;
                 proxy_pass backend;
             }
}
http {
.. ..
}
2）重启nginx服务
[root@proxy ~]# /usr/local/nginx/sbin/nginx -s reload
#请先确保nginx是启动状态才可以执行命令成功，否则报错,报错信息如下：
#[error] open() "/usr/local/nginx/logs/nginx.pid" failed (2: No such file or directory)
3）客户端使用访问代理服务器测试轮询效果
[root@client ~]# ssh 192.168.4.5 -p 12345            //使用该命令多次访问查看效果

http调度
upstream webs{
	server 192.168.2.100:80 weight=1;
	server 192.168.2.200:80 weight=2;
	max_fails=2 fail_timeout=30;
	ip_hash;
	}
server {
	listen 80
	server_name
	proxy_pass http://webs;
	}

TCP/UDP调度（--with-stream）
stream{
	upstream ssh {
		server 192.168.2.100:22;
		server 192.168.2.200:22;
		}
	server{
		listen 12345;
		proxy_pass ssh;
		}
	}

################################################################################################

Nginx常见问题处理

优化Nginx并发量
1）优化前使用ab高并发测试
	# ab -n 2000 -c 2000 http://192.168.4.5/
	Benchmarking 192.168.4.5 (be patient)
	socket: Too many open files (24)                //提示打开文件数量过多
2）修改Nginx配置文件，增加并发量
	# vim /usr/local/nginx/conf/nginx.conf
	.. ..
	worker_processes  2;                    //与CPU核心数量一致
	events {
	worker_connections 65535;        //每个worker最大并发连接数
	use epoll;
	}
	.. ..
	# nginx -s reload
3）优化Linux内核参数（最大文件数量）
	# ulimit -a                        //查看所有属性值
	# ulimit -Hn 100000                //设置硬限制（临时规则,普通用户不可以修改）
	# ulimit -Sn 100000                //设置软限制（临时规则，普通用户可以修改但不能超过硬限制）
	# vim /etc/security/limits.conf
	    .. ..
	*               soft    nofile            100000
	*               hard    nofile            100000
	#该配置文件分4列，分别如下：
	#用户或组    硬限制或软限制    需要限制的项目   限制的值
4）优化后测试服务器并发量（因为客户端没调内核参数，所以在proxy测试）
	# ab -n 2000 -c 2000 http://192.168.4.5/

优化Nginx数据包头缓存

1）优化前，使用脚本测试长头部请求是否能获得响应
	# cat lnmp_soft/buffer.sh 
	#!/bin/bash
	URL=http://192.168.4.5/index.html?
	for i in {1..5000}
	do
	    URL=${URL}v$i=$i
	done
	curl $URL                                //经过5000次循环后，生成一个长的URL地址栏
	# ./buffer.sh
	.. ..
	<center><h1>414 Request-URI Too Large</h1></center>        //提示头部信息过大
2）修改Nginx配置文件，增加数据包头部缓存大小
	# vim /usr/local/nginx/conf/nginx.conf
	.. ..
	http {
	client_header_buffer_size    1k;        //默认请求包头信息的缓存    
	large_client_header_buffers  4 4k;        //大请求包头部信息的缓存个数与容量
	.. ..
	}
	# nginx -s reload
3）优化后，使用脚本测试长头部请求是否能获得响应
	#cat cat buffer.sh 
	#!/bin/bash
	URL=http://192.168.4.5/index.html?
	for i in {1..5000}
	do
	    URL=${URL}v$i=$i
	done
	curl $URL
	# ./buffer.sh

浏览器本地缓存静态数据
浏览器缓存（只适合静态数据，图片，视频，音频）
1）使用Firefox浏览器查看缓存
以Firefox浏览器为例，在Firefox地址栏内输入about:cache将显示Firefox浏览器的缓存信息，如图-3所示，点击List Cache Entries可以查看详细信息。

图-3
2）清空firefox本地缓存数据，如图-4所示。


图-4
3）修改Nginx配置文件，定义对静态页面的缓存时间
	# vim /usr/local/nginx/conf/nginx.conf
	server {
	        listen       80;
	        server_name  localhost;
	        location / {
	            root   html;
	            index  index.html index.htm;
        }
	location ~* \.(jpg|jpeg|gif|png|css|js|ico|xml)$ {
	expires        30d;            //定义客户端缓存时间为30天
	}
	}
	# cp /usr/share/backgrounds/day.jpg /usr/local/nginx/html
	# nginx -s reload
	#请先确保nginx是启动状态才可以执行命令成功，否则报错,报错信息如下：
	#[error] open() "/usr/local/nginx/logs/nginx.pid" failed (2: No such file or directory)
4）优化后，使用Firefox浏览器访问图片，再次查看缓存信息
	# firefox http://192.168.4.5/day.jpg

自定义报错页面
修改Nginx配置文件，自定义报错页面
	# vim /usr/local/nginx/conf/nginx.conf
	.. ..
	error_page   404  /40x.html;    //自定义错误页面
	.. ..
	# vim /usr/local/nginx/html/40x.html        //生成错误页面
	Oops,No NO no page …
	# nginx -s reload
	#请先确保nginx是启动状态才可以执行命令成功，否则报错,报错信息如下：
	#[error] open() "/usr/local/nginx/logs/nginx.pid" failed (2: No such file or directory)
优化后，客户端使用浏览器访问不存在的页面，会提示自己定义的40x.html页面
	# firefox http://192.168.4.5/xxxxx        //访问一个不存在的页面

常见http状态码
	状态码		功能描述
	200		一切正常
	301		永久重定向
	302		临时重定向
	401		用户名或密码错误
	403		禁止访问（客户端IP地址被拒绝）
	404		文件不存在
	414		请求URI头部过长
	500		服务器内部错误
	502		Bad Gateway
如何查看服务器状态信息

1）编译安装时使用--with-http_stub_status_module开启状态页面模块
[root@proxy ~]# yum -y install gcc pcre-devel openssl-devel        //安装常见依赖包
[root@proxy ~]# tar  -zxvf   nginx-1.12.2.tar.gz
[root@proxy ~]# cd  nginx-1.12.2
[root@proxy nginx-1.12.2]# ./configure   \
> --with-http_ssl_module                        //开启SSL加密功能
> --with-stream                                //开启TCP/UDP代理模块
> --with-http_stub_status_module                //开启status状态页面
[root@proxy nginx-1.12.2]# make && make install    //编译并安装
2）修改Nginx配置文件，定义状态页面
	# cat /usr/local/nginx/conf/nginx.conf
	… …
	location /status {
	                stub_status on;
				allow IP;(允许查看的ip工作时用)
				deny all;（拒绝其他所有）
	        }
	… …
	# nginx
3)优化后，查看状态页面信息
	# curl  http://192.168.4.5/status
	Active connections: 1         (当前连接) 
	server accepts handled requests	服务器已经接收的连接数量总量、
	 10 10 3 
	Reading: 0 Writing: 1 Waiting: 0
	Active connections：当前活动的连接数量。
	Accepts：已经接受客户端的连接总数量。
	Handled：已经处理客户端的连接总数量（一般与accepts一致，除非服务器限制了连接数量）。
	Requests：客户端发送的请求数量。 （复0  关服务） 
	Reading：当前服务器正在读取客户端请求头的数量。
	Writing：当前服务器正在写响应信息的数量。
	Waiting：当前多少客户端在等待服务器的响应。

对页面进行压缩处理
1）修改Nginx配置文件
	# cat /usr/local/nginx/conf/nginx.conf
	http {
	.. ..
	gzip on;                            //开启压缩
	gzip_min_length 1000;                //小文件不压缩
	gzip_comp_level 4;                //压缩比率
	gzip_types text/plain text/css application/json application/x-javascript text/xml 		application/xml application/xml+rss text/javascript;
        	                            //对特定文件压缩，类型参考mime.types
	.. ..
	}

服务器内存缓存

1）如果需要处理大量静态文件，可以将文件缓存在内存，下次访问会更快。
	http { 
	open_file_cache          max=2000  inactive=20s;
	        open_file_cache_valid    60s;
	        open_file_cache_min_uses 5;
	        open_file_cache_errors   off;
	//设置服务器最大缓存2000个文件句柄，关闭20秒内无请求的文件句柄
	//文件句柄的有效时间是60秒，60秒后过期
	//只有访问次数超过5次会被缓存
	} 















