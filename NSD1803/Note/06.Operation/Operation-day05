Tomcat+Java两个同时存在才可以启动
JAVA    JDK所有工具（编辑、排错、打包）、JRE简化没有排错包部署Tomcat服务器软件(192.168.2.100/24)
java
	java是一种跨平台的、面向对象的程序设计语言，java技术具有卓越的通用性、高效性、平台移植性和安全性
java体系
	java SE（标准版）
	java EE（企业版）
	java ME（移动版）
JDK简介
	JDK（Java Development Kit）是Sun针对Java开发者退出的Java语言的软件开发工具包
JDK是整个Java的核心
	包括了Java运行环境
	Java工具（如编译、排错、打包等工具）
	Jaca基础的类库
JRE（Java Runtime Environment,Java运行环境），JRE是JDK的子集
JRE包括
	Java虚拟机（jvm）
	Java核心类库和支持文件
	不包含开发工具（JDK）--编译器、调试器和其他工具
Java Servlet
	Servlet是java扩展Web服务器功能的组件规范
常见Servlent容器
	IBM		websphere
	Orache	weblogic
	Apache	tomcat
	RedHat	Jboss
################################################################################	 

1）使用RPM安装JDK环境
	# yum –y install  java-1.8.0-openjdk                //安装JDK
	# yum -y install java-1.8.0-openjdk-headless        //安装JDK
	# java -version                                    //查看JAVA版本
2）安装Tomcat（apache-tomcat-8.0.30.tar.gz软件包，在lnmp_soft中有提供）
	# tar -xf  apache-tomcat-8.0.30.tar.gz
	# mv apache-tomcat-8.0.30  /usr/local/tomcat
	# ls /usr/local/tomcat
	bin/                                            //主程序目录
	lib/                                            //库文件目录
	logs/                                          //日志目录  
	temp/                                         //临时目录
	work/                                        //自动编译目录jsp代码转换servlet
	conf/                                        //配置文件目录
	webapps/                                        //页面目录
3）启动服务
	# /usr/local/tomcat/bin/startup.sh
	# firewall-cmd --set-default-zone=trusted
	# setenforce 0
4）服务器验证端口信息
	# netstat -nutlp |grep java        //查看java监听的端口
	tcp        0      0 :::8080              :::*           LISTEN      2778/java           
	tcp        0      0 ::ffff:127.0.0.1:8005     :::*      LISTEN       2778/java  
提示：如果检查端口时，8005端口启动非常慢，可用使用下面的命令用urandom替换random（非必须操作）。
	# mv /dev/random  /dev/random.bak
	# ln -s /dev/urandom  /dev/random
5）客户端浏览测试页面
	# firefox http://192.168.2.100:8080

配置服务器虚拟主机

1）修改server.xml配置文件，创建虚拟主机
	# vim /usr/local/tomcat/conf/server.xml
	… …
	<Host name="www.a.com" appBase="a" unpackWARS="true" autoDeploy="true">
	</Host>
	<Host name="www.b.com" appBase="b" unpackWARS="true" autoDeploy="true">
	</Host>
2）创建虚拟主机对应的页面根路径
	# mkdir -p  /usr/local/tomcat/{a,b}/ROOT
	# echo "AAA"   > /usr/local/tomcat/a/ROOT/index.html
	# echo "BBB" > /usr/local/tomcat/b/ROOT/index.html
3）重启Tomcat服务器
	# /usr/local/tomcat/bin/shutdown.sh
	# /usr/local/tomcat/bin/startup.sh
4）客户端设置host文件，并浏览测试页面进行测试

修改www.b.com网站的首页目录为base

1）使用docBase参数可以修改默认网站首页路径
	# vim /usr/local/tomcat/conf/server.xml
	… …
	<Host name="www.a.com" appBase="a" unpackWARS="true" autoDeploy="true">
	</Host>
	<Host name="www.b.com" appBase="b" unpackWARS="true" autoDeploy="true">
	<Context path="" docBase="base" reloadable="true"/>
	</Host>
	… …
	# mkdir  /usr/local/tomcat/b/base
	# echo "BASE" > /usr/local/tomcat/b/base/index.html
	# /usr/local/tomcat/bin/shutdown.sh
	# /usr/local/tomcat/bin/startup.sh
2）测试查看页面是否正确
	# firefox http://www.b.com:8080/        //结果为base目录下的页面内容
跳转

1）当用户访问http://www.a.com/test打开/var/www/html目录下的页面
	# vim /usr/local/tomcat/conf/server.xml
	… …
	<Host name="www.a.com" appBase="a" unpackWARS="true" autoDeploy="true">
	<Context path="/test" docBase="/var/www/html/" />
	</Host>
	<Host name="www.b.com" appBase="b" unpackWARS="true" autoDeploy="true">
	<Context path="" docBase="base" />
	</Host>
	… …
	# echo "Test" > /var/www/html/index.html
	# /usr/local/tomcat/bin/shutdown.sh
	# /usr/local/tomcat/bin/startup.sh
2）测试查看页面是否正确
	# firefox http://www.aa.com:8080/test    
	//返回/var/www/html/index.html的内容
	//注意，访问的端口为8080

配置Tomcat支持SSL加密网站

1）创建加密用的私钥和证书文件
	# keytool -genkeypair -alias tomcat -keyalg RSA -keystore /usr/local/tomcat/keystore //提示输入密码为:123456
	//-genkeypair     生成密钥对
	//-alias tomcat     密钥别名
	//-keyalg RSA     定义密钥算法为RSA算法
	//-keystore         定义密钥文件存储在:/usr/local/tomcat/keystore
2)再次修改server.xml配置文件，创建支持加密连接的Connector
	# vim /usr/local/tomcat/conf/server.xml
	… …
	<Connector port="8443" protocol="org.apache.coyote.http11.Http11NioProtocol"
	maxThreads="150" SSLEnabled="true" scheme="https" secure="true"
	keystoreFile="/usr/local/tomcat/keystore" keystorePass="123456" 		clientAuth="false" sslProtocol="TLS" />
	//备注，默认这段Connector被注释掉了，打开注释，添加密钥信息即可
3）重启Tomcat服务器
	# /usr/local/tomcat/bin/shutdown.sh
	# /usr/local/tomcat/bin/startup.sh
4）客户端设置host文件，并浏览测试页面进行测试
	# vim /etc/hosts
	… …
	192.168.2.100      www.a.com  www.b.com
	# firefox https://www.a.com:8443/
	# firefox https://www.b.com:8443/
	# firefox https://192.168.2.100:8443/

配置Tomcat日志
1)为每个虚拟主机设置不同的日志文件
	# vim /usr/local/tomcat/conf/server.xml
	.. ..
	<Host name="www.a.com" appBase="a" unpackWARS="true" autoDeploy="true">
	<Context path="/test" docBase="/var/www/html/" />
	<Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
	               prefix=" aa_access" suffix=".txt"
	               pattern="%h %l %u %t &quot;%r&quot; %s %b" />
	</Host>
	<Host name="www.bb.com" appBase="bb" unpackWARS="true" autoDeploy="true">
	<Context path="" docBase="base" />
	<Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
	               prefix=" bb_access" suffix=".txt"
	               pattern="%h %l %u %t &quot;%r&quot; %s %b" />
	</Host>
	.. ..
2）重启Tomcat服务器
	# /usr/local/tomcat/bin/shutdown.sh
	# /usr/local/tomcat/bin/startup.sh
3）查看服务器日志文件
	# ls /usr/local/tomcat/logs/
扩展实验(配置Tomcat集群)

1) 在192.168.4.5主机上配置Nginx调度器（具体安装步骤参考前面的章节）
	# vim  /usr/local/nginx/conf/nginx.conf
	http{
	    upstream toms {
	        server 192.168.2.100:8080;
	        server 192.168.2.200:8080;
	    }
	    server  {
	        listen 80;
	        server_name localhost;
	        location / {
	            proxy_pass  http://toms;
	        }
	    }
	}  
2) 在192.168.2.100和192.168.2.200主机上配置Tomcat调度器
以下以Web1为例：
	# yum -y install  java-1.8.0-openjdk                //安装JDK
	# yum -y install java-1.8.0-openjdk-headless        //安装JDK
	# tar -xzf  apache-tomcat-8.0.30.tar.gz
	# mv apache-tomcat-8.0.30  /usr/local/tomcat
3）启动服务
	# /usr/local/tomcat/bin/startup.sh

￥################################################################################

代理服务器概述
基本概念
Proxy,代理人、经纪人、中介
代替用户处理事物
	能提供正常情况下不便或无法访问的资源
应用场景：
	Web访问加速（正/反向）
	IP伪装、"翻墙"
代理服务器工作机制
	Cache池的复用
	线路转移
Varnish服务器
	Varnish一款高性能且开源的反向代理服务器。
	Varnish具有性能高、速度快、管理更方便等诸多优点。

部署Varnish缓存服务器(192.168.4.5)

1）编译安装软件(python-docutils默认光盘中没有，需要在lnmp_soft中找)
	# yum -y install gcc readline-devel    //安装软件依赖包
	# yum -y install ncurses-devel         //安装软件依赖包
	# yum -y install pcre-devel            //安装软件依赖包
	# yum -y install \
	python-docutils-0.11-0.2.20130715svn7687.el7.noarch.rpm         //安装软件依赖包
	# useradd -s /sbin/nologin varnish                //创建账户
	# tar -xf varnish-5.2.1.tar.gz
	# cd varnish-5.2.1
	[root@proxy varnish-5.2.1]# ./configure
	[root@proxy varnish-5.2.1]# make && make install
2）复制启动脚本及配置文件
[root@proxy varnish-5.2.1]# cp  etc/example.vcl   /usr/local/etc/default.vcl
3）修改代理配置文件
	# vim  /usr/local/etc/default.vcl
	backend default {
	     .host = "192.168.2.100";
	     .port = "80";
	 }
4）启动服务
	# varnishd  -f /usr/local/etc/default.vcl
	//varnishd命令的其他选项说明如下：
	//varnishd –s malloc,128M        定义varnish使用内存作为缓存，空间为128M
	//varnishd –s file,/var/lib/varnish_storage.bin,1G 定义varnish使用文件作为缓存
客户端测试

1）客户端开启浏览器访问
	# curl http://192.168.4.5
其他操作

1）查看varnish日志
	# varnishlog                        //varnish日志
	# varnishncsa                    //访问日志
2）更新缓存数据，在后台web服务器更新页面内容后，用户访问代理服务器看到的还是之前的数据，说明缓存中的数据过期了需要更新（默认也会自动更新，但非实时更新）。
	# varnishadm  
	varnish> ban req.url ~ .*
	//清空缓存数据，支持正则表达式
























